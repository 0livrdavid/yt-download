import os
import sys
import subprocess
import tempfile
import shutil
import requests
from pathlib import Path
from typing import Dict, Any, Optional
from rich import print as rprint
from rich.prompt import Confirm
from . import __version__

class GitHubUpdater:
    def __init__(self, repo_url: str = "https://github.com/0livrdavid/yt-download-mp3.git"):
        self.repo_url = repo_url
        # Corrigir forma√ß√£o da URL da API
        clean_url = repo_url.replace(".git", "")
        repo_path = clean_url.replace("https://github.com/", "")
        self.api_url = f"https://api.github.com/repos/{repo_path}"
        self.current_version = __version__
        
    def get_latest_release(self) -> Optional[Dict[str, Any]]:
        """Obt√©m informa√ß√µes da √∫ltima release do GitHub."""
        try:
            response = requests.get(f"{self.api_url}/releases/latest", timeout=10)
            if response.status_code == 200:
                return response.json()
            return None
        except Exception as e:
            rprint(f"[red]Erro ao verificar releases: {e}[/red]")
            return None
    
    def get_latest_commit(self) -> Optional[Dict[str, Any]]:
        """Obt√©m informa√ß√µes do √∫ltimo commit."""
        try:
            response = requests.get(f"{self.api_url}/commits/main", timeout=10)
            if response.status_code == 200:
                return response.json()
            return None
        except Exception as e:
            rprint(f"[red]Erro ao verificar commits: {e}[/red]")
            return None
    
    def compare_versions(self, latest_version: str) -> str:
        """Compara vers√µes e retorna status."""
        # Remover 'v' se existir
        latest_clean = latest_version.lstrip('v')
        current_clean = self.current_version.lstrip('v')
        
        try:
            # Converter para tuplas de n√∫meros para compara√ß√£o
            latest_parts = tuple(map(int, latest_clean.split('.')))
            current_parts = tuple(map(int, current_clean.split('.')))
            
            if latest_parts > current_parts:
                return "outdated"
            elif latest_parts < current_parts:
                return "ahead"
            else:
                return "current"
        except ValueError:
            # Se n√£o conseguir comparar, usar compara√ß√£o de string
            if latest_clean != current_clean:
                return "different"
            return "current"
    
    def check_for_updates(self) -> Dict[str, Any]:
        """Verifica se h√° atualiza√ß√µes dispon√≠veis."""
        rprint("[blue]üîç Verificando atualiza√ß√µes...[/blue]")
        
        # Tentar obter √∫ltima release
        latest_release = self.get_latest_release()
        if latest_release:
            latest_version = latest_release['tag_name']
            status = self.compare_versions(latest_version)
            
            return {
                'update_available': status == "outdated",
                'latest_version': latest_version,
                'current_version': self.current_version,
                'status': status,
                'release_info': latest_release,
                'source': 'release'
            }
        
        # Se n√£o h√° releases, verificar commits
        latest_commit = self.get_latest_commit()
        if latest_commit:
            return {
                'update_available': True,  # Assumir que h√° updates se h√° commits
                'latest_version': latest_commit['sha'][:8],
                'current_version': self.current_version,
                'status': 'commit_available',
                'commit_info': latest_commit,
                'source': 'commit'
            }
        
        return {
            'update_available': False,
            'error': 'N√£o foi poss√≠vel verificar atualiza√ß√µes'
        }
    
    def download_and_install_update(self) -> bool:
        """Baixa e instala a atualiza√ß√£o."""
        try:
            rprint("[blue]üì¶ Baixando atualiza√ß√£o...[/blue]")
            
            # Criar diret√≥rio tempor√°rio
            with tempfile.TemporaryDirectory() as temp_dir:
                temp_path = Path(temp_dir)
                
                # Clonar reposit√≥rio
                clone_result = subprocess.run([
                    'git', 'clone', self.repo_url, str(temp_path / 'yt-download-mp3')
                ], capture_output=True, text=True)
                
                if clone_result.returncode != 0:
                    rprint(f"[red]Erro ao clonar reposit√≥rio: {clone_result.stderr}[/red]")
                    return False
                
                repo_path = temp_path / 'yt-download-mp3'
                
                # Verificar se tem pip
                pip_cmd = 'pip3' if shutil.which('pip3') else 'pip'
                
                rprint("[blue]üîß Instalando atualiza√ß√£o...[/blue]")
                
                # Instalar do reposit√≥rio clonado
                install_result = subprocess.run([
                    pip_cmd, 'install', '-e', str(repo_path)
                ], capture_output=True, text=True)
                
                if install_result.returncode != 0:
                    rprint(f"[red]Erro na instala√ß√£o: {install_result.stderr}[/red]")
                    return False
                
                rprint("[green]‚úÖ Atualiza√ß√£o instalada com sucesso![/green]")
                return True
                
        except Exception as e:
            rprint(f"[red]Erro durante atualiza√ß√£o: {e}[/red]")
            return False
    
    def interactive_update(self) -> bool:
        """Interface interativa para atualiza√ß√£o."""
        update_info = self.check_for_updates()
        
        if 'error' in update_info:
            rprint(f"[red]‚ùå {update_info['error']}[/red]")
            return False
        
        if not update_info['update_available']:
            if update_info['status'] == 'current':
                rprint(f"[green]‚úÖ Voc√™ j√° tem a vers√£o mais recente ({self.current_version})[/green]")
            elif update_info['status'] == 'ahead':
                rprint(f"[yellow]üöÄ Sua vers√£o ({self.current_version}) √© mais nova que a oficial ({update_info['latest_version']})[/yellow]")
            return True
        
        # Mostrar informa√ß√µes da atualiza√ß√£o
        if update_info['source'] == 'release':
            release = update_info['release_info']
            rprint(f"\n[bold blue]üéâ Nova vers√£o dispon√≠vel![/bold blue]")
            rprint(f"[cyan]Atual:[/cyan] {update_info['current_version']}")
            rprint(f"[green]Nova:[/green] {update_info['latest_version']}")
            rprint(f"[yellow]Lan√ßada em:[/yellow] {release['published_at'][:10]}")
            
            if release.get('body'):
                rprint(f"\n[bold]üìã Novidades:[/bold]")
                # Limitar descri√ß√£o a 300 caracteres
                description = release['body'][:300]
                if len(release['body']) > 300:
                    description += "..."
                rprint(f"[dim]{description}[/dim]")
        else:
            rprint(f"\n[bold blue]üîÑ Atualiza√ß√µes dispon√≠veis![/bold blue]")
            rprint(f"[cyan]Vers√£o atual:[/cyan] {update_info['current_version']}")
            rprint(f"[green]√öltimo commit:[/green] {update_info['latest_version']}")
        
        # Confirmar instala√ß√£o
        if Confirm.ask("\n[yellow]Deseja instalar a atualiza√ß√£o?[/yellow]"):
            success = self.download_and_install_update()
            if success:
                rprint("\n[green]üéâ Atualiza√ß√£o conclu√≠da! Reinicie o terminal para usar a nova vers√£o.[/green]")
                return True
            else:
                rprint("\n[red]‚ùå Falha na atualiza√ß√£o. Tente novamente ou instale manualmente.[/red]")
                return False
        else:
            rprint("\n[yellow]Atualiza√ß√£o cancelada[/yellow]")
            return False